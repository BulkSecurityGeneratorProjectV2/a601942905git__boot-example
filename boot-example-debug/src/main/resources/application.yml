server:
  shutdown: graceful
  tomcat:
    mbeanregistry:
      enabled: true # 开启tomcat相关指标监控如tomcat.threads.*，访问地址：http://localhost:8080/actuator/metrics
inject:
  value: injectValueInYml
spring:
  application:
    name: 'boot-example'
  lifecycle:
    timeout-per-shutdown-phase: 60s # 设置服务停机的最大等待时间
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: boot-example
    publisher-confirm-type: correlated
    publisher-returns: true # 该属性设置为true之后,生产者发送的消息就是强制性消息,与template.mandatory类似org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer.determineMandatoryFlag
    listener:
      simple:
        concurrency: 4
        max-concurrency: 10
        batch-size: 100
        prefetch: 100
        acknowledge-mode: MANUAL
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&useSSL=false&zeroDateTimeBehavior=convertToNull&autoReconnect=true&allowMultiQueries=true
    username: root
    password: root
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      auto-commit: true # 是否自动提交
      connection-timeout: 30000 # 从连接池中获取连接的最大等待时间，超时未获取到连接会抛出SQLException
      idle-timeout: 600000 # 连接空闲超时时间，该配置只有在minimumIdle < maximumPoolSize的情况下才有效。会清退超过minimum-idle数量、处于空闲状态且空闲时间超过该值的连接，逻辑参照：com.zaxxer.hikari.pool.HikariPool.HouseKeeper中的run()
      max-lifetime: 1800000 # 连接的最大存活时间，活跃连接用于不会被清退。创建连接时会指定定时任务用于清退超过该值的空闲连接
      connection-test-query: SELECT 1 # 如果驱动支持JDBC4，官方强烈建议不要设置该属性
      minimum-idle: 10 # 最小空闲连接数，为了获得最佳性能和应对峰值需求，官方建议不要设置该属性，默认与maximumPoolSize保持一致，使其充当固定连接池
      maximum-pool-size: 10 # 最大连接数，当到达最大连接数并且没有空闲连接时调用getConnection()将会阻塞connectionTimeout
      pool-name: '${spring.application.name}-dataSource' # 连接池名称，默认情况下会自动生成
#  boot:
#    admin:
#      client:
#        url: 'http://localhost:8880' # adminService访问地址
#    druid:
#      initial-size: 10 # 初始化连接数
#      max-active: 20 # 最大连接数
#      min-idle: 10 # 最小连接数
#      max-wait: 60000 # 配置获取连接等待超时的时间
#      time-between-eviction-runs-millis: 2000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      min-evictable-idle-time-millis: 1800000 # 配置一个连接在池中最小生存的时间，单位是毫秒
#      max-evictable-idle-time-millis: 3600000 # 配置一个连接在池中最大生存的时间，单位是毫秒，该配置值一定要大于min-evictable-idle-time-millis的默认值1800000，详见：DruidAbstractDataSource.setMaxEvictableIdleTimeMillis
#      validation-query: select 1 # 检测连接有效性要执行的sql
#      test-while-idle: true # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
#      test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#      test-on-return: false # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#      keep-alive: true # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
#      filter: # 参考DruidFilterConfiguration
#        stat:
#          enabled: true
#        config:
#          enabled: true
#        encoding:
#          enabled: true
management:
  endpoint:
    health:
      show-details: ALWAYS # /health默认情况下不显示各个组件的详细信息，该配置可以展示各个组件的详细信息
  endpoints:
    web:
      exposure:
        include: '*' # startup断点用于查看应用启动过程中的耗时请求
info:
  'boot.version': '@spring.boot.version@' # 读取pom文件中的变量，需要在pom文件中添加配置，详情参考pom.xml中的<build>元素
  'project.version': '@project.version@' # 读取pom文件中的变量，需要在pom文件中添加配置，详情参考pom.xml中的<build>元素
  'project.name': '${spring.application.name}' # 读取yml文件的的变量