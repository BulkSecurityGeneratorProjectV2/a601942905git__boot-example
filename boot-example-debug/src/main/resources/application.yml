server:
  shutdown: graceful
inject:
  value: injectValueInYml
spring:
  application:
    name: 'boot-example'
  lifecycle:
    timeout-per-shutdown-phase: 60s # 设置服务停机的最大等待时间
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: boot-example
    publisher-confirm-type: correlated
    publisher-returns: true # 该属性设置为true之后,生产者发送的消息就是强制性消息,与template.mandatory类似org.springframework.boot.autoconfigure.amqp.RabbitTemplateConfigurer.determineMandatoryFlag
    listener:
      simple:
        concurrency: 4
        max-concurrency: 10
        batch-size: 100
        prefetch: 100
        acknowledge-mode: MANUAL
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&useSSL=false&zeroDateTimeBehavior=convertToNull&autoReconnect=true&allowMultiQueries=true
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 10 # 初始化连接数
      max-active: 20 # 最大连接数
      min-idle: 10 # 最小连接数
      max-wait: 60000 # 配置获取连接等待超时的时间
      time-between-eviction-runs-millis: 2000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 600000 # 配置一个连接在池中最小生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 9000000 # 配置一个连接在池中最大生存的时间，单位是毫秒
      validation-query: select 1 # 检测连接有效性要执行的sql
      test-while-idle: true # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
      test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      keep-alive: true # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      filter: # 参考DruidFilterConfiguration
        stat:
          enabled: true
        config:
          enabled: true
        encoding:
          enabled: true
management:
  endpoint:
    health:
      show-details: ALWAYS # /health默认情况下不显示各个组件的详细信息，该配置可以展示各个组件的详细信息
  endpoints:
    web:
      exposure:
        include: startup, health, info, custom # startup断点用于查看应用启动过程中的耗时请求
info:
  'boot.version': '@spring.boot.version@' # 读取pom文件中的变量，需要在pom文件中添加配置，详情参考pom.xml文件
  'project.version': '@project.version@' # 读取pom文件中的变量，需要在pom文件中添加配置，详情参考pom.xml文件
  'project.name': '${spring.application.name}' # 读取yml文件的的变量